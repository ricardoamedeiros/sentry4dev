stages:
  - build 
  - deploy
  - sentry-staging

docker_build_and_push:
    image: docker:latest
    services:
        - docker:dind
    stage: build
    script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker build -t $CI_REGISTRY_IMAGE:$CI_PIPELINE_ID  .        
        - docker push $CI_REGISTRY_IMAGE:$CI_PIPELINE_ID

sentry-staging:
  image: getsentry/sentry-cli:1.52.3
  stage: sentry-staging
  script:
    - sentry-cli releases new -p ${CI_PROJECT_NAME} ${CI_PIPELINE_ID}

sentry-staging-commit:
  image: getsentry/sentry-cli:1.52.3
  stage: sentry-staging
  script:
    - sentry-cli releases set-commits ${CI_PIPELINE_ID} --auto 

sentry-staging-deploy:
  image: getsentry/sentry-cli:1.52.3
  stage: sentry-staging
  environment:
    name: staging
  script:
    - sentry-cli releases deploys ${CI_PIPELINE_ID} new -e ${CI_ENVIRONMENT_NAME}

deploy:
  stage: deploy
  variables:
        CI_AWS_ECS_CLUSTER: sentry-stack
        CI_AWS_ECS_SERVICE: sentry-service
        CI_AWS_ECS_TASK_DEFINITION_FILE: ci/aws/task_definition.json
  environment:
    name: staging
    url: ${URL}
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-ecs:latest
  script:
    - sed -i 's/BUILD/'${CI_PIPELINE_ID}'/g' ci/aws/task_definition.json
    - sed -i 's/CI_ENVIRONMENT_NAME/'${CI_ENVIRONMENT_NAME}'/g' ci/aws/task_definition.json
    - sed -i 's/CI_PIPELINE_ID/'${CI_PIPELINE_ID}'/g' ci/aws/task_definition.json
    - ecs update-task-definition
